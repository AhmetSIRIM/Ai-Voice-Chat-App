name: Unico Case Ai Voice Chat App CI & CD Pipeline

on:
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run unit tests'
        required: true
        default: true
        type: boolean
      run_lint:
        description: 'Run ktlint check'
        required: true
        default: true
        type: boolean

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_lint == 'true' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Create properties files for lint
      run: |
        echo "GEMINI_GENERATIVE_AI_API_KEY=test_key" > secrets.properties
        echo "GEMINI_GENERATIVE_AI_MODEL_NAME=test_model" >> secrets.properties
        echo "GOOGLE_CLOUD_TEXT_TO_SPEECH_API_KEY=test_tts_key" >> secrets.properties
                
        echo "GEMINI_GENERATIVE_AI_API_KEY=generative_ai_api_key" > local.defaults.properties
        echo "GEMINI_GENERATIVE_AI_MODEL_NAME=model_name" >> local.defaults.properties
        echo "GOOGLE_CLOUD_TEXT_TO_SPEECH_API_KEY=text_to_speech_ai_api_key" >> local.defaults.properties
      
    - name: Upload ktlint reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ktlint-reports
        path: app/build/reports/ktlint/
        
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_tests == 'true' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Create properties files for tests
      run: |
        echo "GEMINI_GENERATIVE_AI_API_KEY=test_key" > secrets.properties
        echo "GEMINI_GENERATIVE_AI_MODEL_NAME=test_model" >> secrets.properties
        echo "GOOGLE_CLOUD_TEXT_TO_SPEECH_API_KEY=test_tts_key" >> secrets.properties
        
        echo "GEMINI_GENERATIVE_AI_API_KEY=generative_ai_api_key" > local.defaults.properties
        echo "GEMINI_GENERATIVE_AI_MODEL_NAME=model_name" >> local.defaults.properties
        echo "GOOGLE_CLOUD_TEXT_TO_SPEECH_API_KEY=text_to_speech_ai_api_key" >> local.defaults.properties
        
    - name: Run unit tests
      run: ./gradlew testDebugUnitTest
      
    - name: Generate test report
      run: ./gradlew jacocoTestReport
      if: always()
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          app/build/reports/tests/
          **/build/reports/tests/
          app/build/reports/jacoco/
          **/build/reports/jacoco/
          
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always()
    
    steps:
    - name: Pipeline Summary
      run: |
        echo "## 📋 Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lint Check | ${{ needs.lint.result || 'Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.test.result || 'Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.test.result }}" == "failure" ]]; then
          echo "❌ **Pipeline Failed** - Check the logs above for details" >> $GITHUB_STEP_SUMMARY
          exit 1
        elif [[ "${{ needs.lint.result }}" == "success" || "${{ needs.test.result }}" == "success" ]]; then
          echo "✅ **Pipeline Completed Successfully**" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Pipeline Completed** - All jobs were skipped" >> $GITHUB_STEP_SUMMARY
        fi
